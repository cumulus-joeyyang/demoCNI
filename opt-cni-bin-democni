#!/bin/bash


log=/var/log/democni.log
echo >> $log
echo "#### Start of the democni binary logging..... ###" >> $log
echo "COMMAND: $CNI_COMMAND" >> $log
echo >> $log


config=`cat /dev/stdin`


case $CNI_COMMAND in
ADD)

	localPodCIDR=$(cat /run/democni/subnet.env | jq -r ".localpodcidr")


	bridgeName=$(echo $config | jq -r ".bridge")
	if ! ip link show $bridgeName &> /dev/null ; then
        ip link add dev $bridgeName type bridge
	fi
	ip link set $bridgeName up
	bridgeIP=$(echo $localPodCIDR | sed "s:0/24:1:g")
	bridgeIPNetmask=$(echo $localPodCIDR | cut -d '/' -f 2)
	ip addr add ${bridgeIP}/${bridgeIPNetmask} dev $bridgeName
	
    
    # calculate $ip
    if [ -f /tmp/last_allocated_ip ]; then
        n=`cat /tmp/last_allocated_ip`
    else
        n=1
    fi
    n=$(($n+1))
    ip=$(echo $localPodCIDR | sed "s:0/24:$n:g")
    echo $n > /tmp/last_allocated_ip


    host_ifname="demo$n"
    ip link add pod${n}_${CNI_IFNAME} type veth peer name $host_ifname
    ip link set $host_ifname up
	
	
    mkdir -p /var/run/netns/
    ip link set $host_ifname master $bridgeName
    ln -sfT $CNI_NETNS /var/run/netns/$CNI_CONTAINERID
    ip link set pod${n}_${CNI_IFNAME} netns $CNI_CONTAINERID
	ip netns exec $CNI_CONTAINERID ip link set dev pod${n}_${CNI_IFNAME} name ${CNI_IFNAME}
    ip netns exec $CNI_CONTAINERID ip link set $CNI_IFNAME up
    ip netns exec $CNI_CONTAINERID ip addr add $ip/${bridgeIPNetmask} dev $CNI_IFNAME
    ip netns exec $CNI_CONTAINERID ip route add default via $bridgeIP


    mac=$(ip netns exec $CNI_CONTAINERID ip link show ${CNI_IFNAME} | awk '/ether/ {print $2}')
    address="${ip}/${bridgeIPNetmask}"
    output_template='
{
  "cniVersion": "0.4.0",
  "interfaces": [
      {
          "name": "%s",
          "mac": "%s",                            
          "sandbox": "%s" 
      }
  ],
  "ips": [
      {
          "version": "4",
          "address": "%s",
          "gateway": "%s",          
          "interface": 0 
      }
  ]
}'
    output=$(printf "${output_template}" $CNI_IFNAME $mac $CNI_NETNS $address $bridgeIP)
    echo >> $log
    echo $output >> $log
    echo "ADD finished...." >> $log

    echo "$output"


    
;;

DEL)
    rm -rf /var/run/netns/$CNI_CONTAINERID
	echo "DEL finished...." >> $log
;;

GET)
;;

VERSION)
echo '{
  "cniVersion": "0.4.0", 
  "supportedVersions": [ "0.3.0", "0.3.1", "0.4.0" ] 
}'
;;

*)
  echo "Unknown cni command: $CNI_COMMAND" 
  exit 1
;;

esac